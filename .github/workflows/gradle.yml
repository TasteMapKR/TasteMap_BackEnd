name: CI/CD

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 이 워크플로우가 트리거됩니다.

env:
  DOCKER_IMAGE_NAME: quddaz/myapp
  EC2_HOST: 3.36.98.16
  EC2_SSH_USER: ubuntu
  PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
  COMPOSE_FILE_URL: https://raw.githubusercontent.com/TasteMapKR/TasteMap_BackEnd/main/docker-compose.yml

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4  # 리포지토리의 코드를 체크아웃합니다.

    - name: Set up JDK 17
      uses: actions/setup-java@v4  # JDK 17을 설정합니다.
      with:
        java-version: '17'  # 사용할 JDK 버전을 설정합니다.
        distribution: 'temurin'  # AdoptOpenJDK의 Temurin 배포판을 사용합니다.

    - name: Gradle Caching
      uses: actions/cache@v3  # Gradle 캐싱을 설정합니다.
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}  # 캐시 키를 설정합니다.
        restore-keys: |
          ${{ runner.os }}-gradle-  # 캐시 복원 키를 설정합니다.

    - name: Create application.yml from secret
      run: |
        mkdir -p ./src/main/resources  # 필요한 디렉토리를 생성합니다.
        echo "${{ secrets.APPLICATION }}" | base64 --decode > ./src/main/resources/application.yml  # 시크릿을 디코딩하여 파일로 저장합니다.
      shell: bash  # bash 쉘에서 스크립트를 실행합니다.

    - name: Make gradlew executable
      run: chmod +x ./gradlew  # gradlew 파일에 실행 권한을 부여합니다.

    - name: Build with Gradle Wrapper
      run: ./gradlew build  # Gradle Wrapper를 사용하여 프로젝트를 빌드합니다.

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag ${{ env.DOCKER_IMAGE_NAME }}:latest

    - name: Login to Docker Hub using Access Token
      run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Push the Docker image
      run: docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy-to-ec2:
    needs: build-and-push-docker
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_SSH_USER }}
        key: ${{ env.PRIVATE_KEY }}
        script: |
          # Install Docker Compose if not already installed
          if ! command -v docker-compose &> /dev/null
          then
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          # Download docker-compose.yml
          curl -o /home/ubuntu/docker-compose.yml ${{ env.COMPOSE_FILE_URL }}
          # Stop and remove existing containers
          sudo docker-compose -f /home/ubuntu/docker-compose.yml down
          # Pull new images and restart containers
          sudo docker-compose -f /home/ubuntu/docker-compose.yml pull
          sudo docker-compose -f /home/ubuntu/docker-compose.yml up -d
